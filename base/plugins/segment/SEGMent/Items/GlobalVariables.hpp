#pragma once

#include <score/model/Skin.hpp>

#include <QBrush>
#include <QPen>

#define SCENE_IMAGES_DIRECTORY "Scenes/"
#define OBJECT_IMAGES_DIRECTORY "Objects/"
#define SOUNDS_DIRECTORY "Sounds/"
#define TEMPLATES_DIRECTORY "Templates/"

#define SEGMENT_SCENE_ID "SCENE"
#define SEGMENT_SOUND_ID "SOUND"
#define SEGMENT_TEMPLATE_ID "TEMPLATE"

#define SEGMENT_OBJECT_ID "OBJECT"
#define SEGMENT_CLICKAREA_ID "CLICKAREA"
#define SEGMENT_BACKCLICKAREA_ID "BACKCLICKAREA"
#define SEGMENT_TEXTAREA_ID "TEXTAREA"

#define SEGMENT_TEXTRIDDLE_ID "TEXTRIDDLE"
#define SEGMENT_GIFRIDDLE_ID "GIFRIDDLE"
#define SEGMENT_PUZZLERIDDLE_ID "PUZZLERIDDLE"

namespace SEGMent
{

/*
#####  Color Palette by Paletton.com
#####  Palette URL: http://paletton.com/#uid=7040u0kleqtbzEKgVuIpcmGtdhZ

*** Primary color: (red)

shade 0 = #D35447 = rgb(211, 84, 71) = rgba(211, 84, 71,1) =
rgb0(0.827,0.329,0.278) shade 1 = #FFACA3 = rgb(255,172,163) =
rgba(255,172,163,1) = rgb0(1,0.675,0.639) shade 2 = #F58073 = rgb(245,128,115)
= rgba(245,128,115,1) = rgb0(0.961,0.502,0.451) shade 3 = #B53426 = rgb(181,
52, 38) = rgba(181, 52, 38,1) = rgb0(0.71,0.204,0.149) shade 4 = #8F190D =
rgb(143, 25, 13) = rgba(143, 25, 13,1) = rgb0(0.561,0.098,0.051)

*** Secondary color (1): (orange)

shade 0 = #D38B47 = rgb(211,139, 71) = rgba(211,139, 71,1) =
rgb0(0.827,0.545,0.278) shade 1 = #FFD0A3 = rgb(255,208,163) =
rgba(255,208,163,1) = rgb0(1,0.816,0.639) shade 2 = #F5B373 = rgb(245,179,115)
= rgba(245,179,115,1) = rgb0(0.961,0.702,0.451) shade 3 = #B56C26 =
rgb(181,108, 38) = rgba(181,108, 38,1) = rgb0(0.71,0.424,0.149) shade 4 =
#8F4C0D = rgb(143, 76, 13) = rgba(143, 76, 13,1) = rgb0(0.561,0.298,0.051)

*** Secondary color (2): (blue)

shade 0 = #2E7582 = rgb( 46,117,130) = rgba( 46,117,130,1) =
rgb0(0.18,0.459,0.51) shade 1 = #79B0BB = rgb(121,176,187) =
rgba(121,176,187,1) = rgb0(0.475,0.69,0.733) shade 2 = #498A97 = rgb(
73,138,151) = rgba( 73,138,151,1) = rgb0(0.286,0.541,0.592) shade 3 = #1A626F =
rgb( 26, 98,111) = rgba( 26, 98,111,1) = rgb0(0.102,0.384,0.435) shade 4 =
#0A4C58 = rgb( 10, 76, 88) = rgba( 10, 76, 88,1) = rgb0(0.039,0.298,0.345)

*** Complement color: (green)

shade 0 = #369F4D = rgb( 54,159, 77) = rgba( 54,159, 77,1) =
rgb0(0.212,0.624,0.302) shade 1 = #87D498 = rgb(135,212,152) =
rgba(135,212,152,1) = rgb0(0.529,0.831,0.596) shade 2 = #57B96D = rgb(
87,185,109) = rgba( 87,185,109,1) = rgb0(0.341,0.725,0.427) shade 3 = #1D8935 =
rgb( 29,137, 53) = rgba( 29,137, 53,1) = rgb0(0.114,0.537,0.208) shade 4 =
#096C1F = rgb(  9,108, 31) = rgba(  9,108, 31,1) = rgb0(0.035,0.424,0.122)

#####  Generated by Paletton.com (c) 2002-2014
*/
struct Style
{
  Style()
  {
    constexpr auto rgb = [](int r, int g, int b, int a = 255) {
      return QColor::fromRgb(r, g, b, a);
    };
    backgroundPen = QBrush(rgb(208, 214, 215).lighter(115), Qt::CrossPattern);
    backgroundBrush = QBrush(rgb(208, 214, 215).lighter(130));

    // Transitions
    arrow.pen = QPen(
        rgb(26, 98, 111), 5, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    arrow.brush = rgb(73, 138, 151);

    arrow.hoverPen = QPen(
        rgb(26, 98, 200), 7, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    arrow.hoverBrush = rgb(73, 138, 200);

    arrow.draggedPen = QPen(
        rgb(181, 108, 38), 3, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    arrow.draggedBrush = rgb(255, 208, 163);

    arrow.selectedPen = QPen(
        rgb(121, 176, 187), 12, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    arrow.selectedBrush = rgb(121, 176, 187);

    sceneArrow.pen = QPen(
        rgb(161, 85, 26), 5, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    sceneArrow.brush = rgb(161, 85, 26).lighter();

    sceneArrow.hoverPen = QPen(
        rgb(230, 98, 26), 7, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    sceneArrow.hoverBrush = rgb(230, 98, 26).lighter();

    sceneArrow.draggedPen = QPen(
        rgb(108, 181, 38), 3, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    sceneArrow.draggedBrush = rgb(108, 181, 38).lighter();

    sceneArrow.selectedPen = QPen(
        rgb(187, 176, 121), 12, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    sceneArrow.selectedBrush = rgb(187, 176, 121).lighter();

    // Areas
    clickAreaPen = QPen(
        rgb(181, 108, 38, 100), 3, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    clickAreaBrush = rgb(255, 208, 163, 150);

    backClickAreaPen = QPen(
        rgb(135, 212, 152, 150),
        3,
        Qt::SolidLine,
        Qt::RoundCap,
        Qt::RoundJoin);
    backClickAreaBrush = rgb(87, 185, 109, 150);

    textAreaPen = QPen(
        rgb(141, 196, 207, 250).lighter(),
        3,
        Qt::SolidLine,
        Qt::RoundCap,
        Qt::RoundJoin);
    textAreaBrush = rgb(26, 98, 111, 150);

    sceneBorderPen = QPen(rgb(211, 139, 71), 1);
    sceneBorderPen.setCosmetic(true);
    selectedSceneBorderPen = QPen(rgb(9, 108, 31), 3);
    sceneBorderPen.setCosmetic(true);

    sceneLabelStyle
        = "* { "
          "color: rgba(226, 247, 251,1); "
          "background-color: transparent; "
          "font: 13pt bold; "
          "border: 0px transparent"
          "}";

    anchorPen = QPen(
        rgb(143, 76, 13), 2, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);
    anchorBrush = rgb(211, 139, 71);
  }

  static Style& instance()
  {
    static Style s;
    return s;
  }

  QBrush backgroundPen;
  QBrush backgroundBrush;

  struct
  {
    QPen pen;
    QBrush brush;

    QPen hoverPen;
    QBrush hoverBrush;

    QPen draggedPen;
    QBrush draggedBrush;

    QPen selectedPen;
    QBrush selectedBrush;
  } arrow, sceneArrow;

  QPen clickAreaPen;
  QBrush clickAreaBrush;

  QPen backClickAreaPen;
  QBrush backClickAreaBrush;

  QPen textAreaPen;
  QBrush textAreaBrush;

  QPen sceneBorderPen;
  QPen selectedSceneBorderPen;
  // QColor sceneLabel;
  // QBrush sceneLabelBackground;
  QString sceneLabelStyle;

  QPen anchorPen;
  QBrush anchorBrush;
};
} // namespace SEGMent
